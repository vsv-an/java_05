import java.util.Arrays;

public class SpiralPatternExample4 {
    //Author: Alex Renkas
    //Возьмем массив, в котором содержится 5 строк и 5 столбцов, заполним его
    // по спирали числами, начиная с 1, и выведем на экран. В 1-м примере массив
    //заполняется по чаоовой стрелке от периферии к центру.

    public static void main(String[] args) {
        // Заполним массив, кол-во строк мы обозначим m, а столбцов - n/
        int m = 6;
        int n = 6;
        //С помощью переменной s задаются числа внутри массива, начиная с 1.
        int s = 1;
        //Объявляем и инициализируем массив.
        int[][] array = new int[m][n];
        //Заполняем периметр массива по часовой стрелке.
        for (int y = 0; y < n; y++) {
            array[0][y] = s;
//            s++;
        }
        for (int x = 1; x < m; x++) {
            array[x][n - 1] = s;
//            s++;
        }
        for (int y = n - 2; y >= 0; y--) {
            array[m - 1][y] = s;
//            s++;
        }
        for (int x = m - 2; x > 0; x--) {
            array[x][0] = s;
//            s++;
        }
        for (int y = 1; y < n -1; y++) {
            array[1][y] = s + 1;
//            s++;
        }
        for (int x = 1; x < m; x++) {
            array[x][n - 2] = s + 1;
//            s++;
        }
        //Периметр заполнен. Продолжаем заполнять массив и задаем
        //координаты ячейки, которую необходимо заполнить слудующей.
        int c = 1;
        int d = 1;

//        while (s < 4) {
//            s++;
//            //В Java инициализированный интовый массив заполняется нулями.
//            //Периметр мы заполнили числами, отличными от нулей.
//            //Следующие циклы поочередно работают, заполняя ячейки.
//            //Вложенный цикл останавливается, если следующая ячейка имеет
//            //значение, отличное от ноля. Ячейка, на которой остановился цикл,
//            //не заполняется.
//
//            //Движемся вправо
//            while (array[c][d + 1] == 0) {
//                array[c][d] = s;
////                s++;
//                d++;
//            }
//            //Движемся вниз
//            while (array[c + 1][d] == 0) {
//                array[c][d] = s;
////                s++;
//                c++;
//            }
//            //Движемся влево
//            while (array[c][d - 1] == 0) {
//                array[c][d] = s;
////                s++;
//                d--;
//            }
//            //Движемся вверх
//            while (array[c - 1][d] == 0) {
//                array[c][d] = s;
////                s++;
//                c--;
//            }
////            s++;
//        }
        //При данном решении в центре всегда остается незаполненная ячейка.
        //Убираем ее при помощи следующего цикла.
//        for (int x = 0; x < m; x++) {
//            for (int y = 0; y < n; y++) {
//                if (array[x][y] == 0) {
//                    array[x][y] = s;
//                }
//            }
//        }
        //Выводим массив в консоль.
        for (int x = 0; x < m; x++) {
            for (int y = 0; y < n; y++) {
                if (array[x][y] < 10) {
                    //Два пробела, чтобы в консоли столбцы были ровные
                    System.out.print(array[x][y] + ",  ");
                } else {
                    System.out.print(array[x][y] + ", ");
                }
            }
            System.out.println("");
        }
        System.out.println(Arrays.deepToString(array));
        System.out.println();
    }
}
